1.1 ОТНОШЕНИЕ (ТАБЛИЦА)

    1) Сформулируйте SQL запрос для создания таблицы book.
       CREATE table book (book_id INT PRIMARY KEY AUTO_INCREMENT, title VARCHAR(50), author VARCHAR(30), price DECIMAL(8, 2), amount INT);

    2) Занесите новую строку в таблицу book.
       INSERT INTO book VALUES (1, "Мастер и Маргарита", "Булгаков М.А.", 670.99, 3);

    3) Занесите три последние записи в таблицу book;
       INSERT INTO book VALUES (2, 'Белая гвардия', 'Булгаков М.А.', 540.50, 5);
       INSERT INTO book VALUES (3,'Идиот', 'Достоевский Ф.М.', 460.00, 10);
       INSERT INTO book VALUES (4, 'Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);
          
1.2 ВЫБОРКА ДАННЫХ

    4) Вывести информацию о всех книгах, хранящихся на складе.
       SELECT * FROM book;

    5) Выбрать авторов, название книг и их цену из таблицы book.
       SELECT author, title, price FROM book;

    6) Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор. 
       SELECT title AS Название, author AS Автор FROM book;

    7) Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. Посчитать стоимость упаковки для каждой книги (сколько денег
       потребуется, чтобы упаковать все экземпляры книги). В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать
       pack.
       SELECT title, amount, 1.65 * amount AS pack FROM book;

    8) В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. Написать SQL запрос, который из таблицы book выбирает названия, авторов, 
       количества и вычисляет новые цены книг. Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.
       SELECT title, author, amount, ROUND (price-(price*30/100), 2) AS new_price FROM book;

    9) Выбрать авторов, название книг и их цену из таблицы book.
       SELECT author, title, price FROM book;

    10) Вывести автора, название  и цены тех книг, количество которых меньше 10.
       SELECT author, title, price FROM book WHERE amount < 10;

    11) Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг 
       больше или равна 5000.
       SELECT title, author, price, amount FROM book WHERE (price < 500 OR price > 600) AND price*amount >= 5000;

    12) Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7.
       SELECT title, author FROM book WHERE (price BETWEEN 540.50 AND 800) AND amount IN (2, 3, 5, 7);

    13) Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). Информацию  отсортировать сначала по 
        авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
        SELECT author, title FROM book WHERE amount BETWEEN 2 AND 14 ORDER BY author DESC, title;

    14) Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». Считать, что в названии
        слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы 
        записываются без пробела в формате: буква, точка, буква, точка. Информацию отсортировать по названию книги в алфавитном порядке.
        SELECT title, author FROM book WHERE title LIKE "%_ %_" AND author LIKE "%С.%" ORDER BY title; (%_ - любое одно слово);

1.3 ЗАПРОСЫ И ГРУППОВЫЕ ОПЕРАЦИИ

    15) Отобрать различные (уникальные) элементы столбца amount таблицы book.
        SELECT DISTINCT amount FROM book;

    16) Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг 
        и Количество_экземпляров соответственно.
        SELECT author AS 'Автор', COUNT(DISTINCT title) AS 'Различных_книг', SUM(amount) AS 'Количество_экземпляров' FROM book GROUP BY author;

    17) Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, 
        Максимальная_цена и Средняя_цена соответственно.
        SELECT author, MIN(price) AS 'Минимальная_цена', MAX(price) AS 'Максимальная_цена', AVG(price) AS 'Средняя_цена' FROM book GROUP BY author;

    18) Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных 
        сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения 
        округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:
        SELECT author, SUM(amount*price) AS 'Стоимость', SUM(ROUND((amount*price*18/100)/(1+(18/100)),2)) AS 'НДС', 
        SUM(ROUND((amount*price)/(1+(18/100)),2)) AS 'Стоимость_без_НДС' FROM book GROUP BY author;

    19) Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. Названия столбцов Минимальная_цена, 
        Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
        SELECT MIN(price) AS 'Минимальная_цена', MAX(price) AS 'Максимальная_цена', ROUND((AVG(price)),2) AS 'Средняя_цена' FROM book;

    20) Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. 
        Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
        SELECT ROUND((AVG(price)),2) AS 'Средняя_цена', ROUND((SUM(price * amount)),2) AS 'Стоимость' FROM book WHERE amount BETWEEN 5 AND 14;

    21) Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, 
        у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб. Вычисляемый столбец назвать Стоимость. 
        Результат отсортировать по убыванию стоимости.
        SELECT author, SUM(price * amount) AS 'Стоимость' FROM book WHERE title != 'Идиот' AND title != 'Белая гвардия' 
        GROUP BY author HAVING SUM(price * amount) > 5000 ORDER BY Стоимость DESC;

    22) Узнать сколько авторов, у которых есть книги со стоимостью более 500 и количеством более 1 шт на складе, при количестве различных названий 
        произведений не менее 2-х. Вывести автора, количество различных произведений автора, минимальную цену и количество книг на складе.
        SELECT author, COUNT(title) AS 'Количество_произведений', MIN(price) AS Минимальная_цена, SUM(amount) AS 'Количество книг' 
        FROM book WHERE price > 500 AND amount > 1 GROUP BY author HAVING COUNT(title) > 1;

1.4 ВЛОЖЕННЫЕ ЗАПРОСЫ

    23) Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в 
        отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
        SELECT author, title, price FROM book WHERE price <= (SELECT AVG(price) from book) ORDER BY price DESC;

    24) Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей 
        в отсортированном по возрастанию цены виде.
        SELECT author, title, price FROM book WHERE price <= (SELECT MIN(price)+150 FROM book) ORDER BY price;

    25) Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
        SELECT author, title, amount FROM book WHERE amount IN (SELECT amount FROM book GROUP BY amount HAVING COUNT(amount)=1);

    26) Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
        SELECT author, title, price FROM book WHERE price < ALL(SELECT MAX(price) FROM book WHERE price IN (SELECT MIN(price) FROM book GROUP BY author));

    27) Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, 
        равное значению самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, текущее количество экземпляров 
        на складе и количество заказываемых экземпляров книг. Последнему столбцу присвоить имя Заказ. В результат не включать книги, которые заказывать 
        не нужно.
        SELECT title, author, amount, ((SELECT MAX(amount) FROM book)-amount) AS Заказ FROM book WHERE amount<(SELECT MAX(amount) FROM book);

    28) Какая книга принесет больше всего выручки, в процентах.
        SELECT *, round((100*price*amount/(SELECT SUM(price*amount) FROM book)),2) AS income_percent FROM book ORDER BY income_percent DESC;


1.5 ЗАПРОСЫ КОРРЕКТИРОВКИ ДАННЫХ

    29) Создать таблицу поставка (supply), которая имеет ту же структуру, что и таблиц book.
        CREATE table supply (supply_id INT PRIMARY KEY AUTO_INCREMENT, title VARCHAR(50), author VARCHAR(30), price DECIMAL(8, 2), amount INT);

    30) Заполнить таблицу supply записями по документации:
        INSERT INTO supply VALUES (1, "Лирика", "Пастернак Б.Л.", 518.99, 2);
        INSERT INTO supply VALUES (2, "Черный человек", "Есенин С.А.", 570.20, 6);
        INSERT INTO supply VALUES (3, "Белая гвардия", "Булгаков М.А.", 540.50, 7);
        INSERT INTO supply VALUES (4, "Идиот", "Достоевский Ф.М.", 360.80, 3);

    31) Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
        INSERT INTO book (title, author, price, amount) SELECT title, author, price, amount FROM supply WHERE author NOT IN 
        ('Булгаков М.А.', 'Достоевский Ф.М.'); 
        SELECT * FROM book;

    32) Занести из таблицы supply в таблицу book только те книги, авторов которых нет в book.
        INSERT INTO book (title, author, price, amount) SELECT title, author, price, amount FROM supply WHERE author NOT IN (SELECT author FROM book);
        SELECT * FROM book;
     
    33) Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
        UPDATE book SET price = 0.9 * price WHERE amount BETWEEN 5 AND 10;
        SELECT * FROM book;

    34) В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг,
        указанных в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%;
        UPDATE book SET buy = IF(buy > amount, amount, buy), price = IF(buy = 0, price * 0.9, price * 1);
        SELECT * FROM book;

    35) Для тех книг в таблице book, которые есть в таблице supply, не только увеличить их количество в таблице book (увеличить их количество на 
        значение столбца amount таблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
        UPDATE book, supply SET book.amount = book.amount + supply.amount
        WHERE book.title = supply.title;
        UPDATE book, supply SET book.price = (book.price + supply.price)/2
        WHERE book.title = supply.title AND (book.price + supply.price)/2 > supply.price;
        SELECT * FROM book;

    36) Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.
        DELETE FROM supply WHERE author IN(SELECT author FROM book GROUP BY author HAVING SUM(amount)>=10);
        SELECT * FROM supply;

    37) Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего 
        количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее 
        количество экземпляров книг в таблице book.
        CREATE TABLE ordering AS SELECT author, title, (SELECT ROUND(AVG(amount)) FROM book) AS amount FROM book WHERE amount<(SELECT ROUND(AVG(amount)) 
        FROM book);
        SELECT * FROM ordering;

    38) Делаем скидку 5% на самое большое количество экземпляров книг (Стихи Есенина), чтобы поскорее расходились.
        UPDATE book SET price = round(price*0.95,2) WHERE author = 'Есенин С.А.' AND amount IN (SELECT * FROM (SELECT max(amount) FROM book 
        WHERE author = 'Есенин С.А.') AS price);
        SELECT * FROM book;


1.6 ТАБЛИЦА "КОМАНДИРОВКИ", ЗАПРОСЫ НА ВЫБОРКУ
    
    39) Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию 
        даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.
        SELECT name, city, per_diem, date_first, date_last FROM trip WHERE name LIKE '%а %' ORDER BY date_last DESC;

    40) Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
        SELECT DISTINCT name FROM trip WHERE city = 'Москва' ORDER BY name;

    41) Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. 
        Вычисляемый столбец назвать Количество.
        SELECT city, COUNT(city) AS Количество FROM trip GROUP BY city ORDER BY city;

    42) Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.
        SELECT city, COUNT(city) AS Количество FROM trip GROUP BY city ORDER BY Количество DESC LIMIT 2;

    43) Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город, длительность командировки
        в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в 
        упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
        SELECT name, city, DATEDIFF(date_last, date_first)+1 AS Длительность FROM trip WHERE city NOT IN ('Москва', 'Санкт-Петербург') ORDER BY  3 DESC, 
        2 DESC;
        (!!! При наличии двух условий фильтраций, нужно использовать нумерацию столбцов, а не названия (то же самое можно применятьв в одиночной фильтрации))

    44) Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, 
        date_last.
        SELECT name, city, date_first, date_last FROM trip WHERE (date_last-date_first)=(SELECT MIN(date_last-date_first) FROM trip);

    45) Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). В результат включить столбцы name, city,
        date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника.
        SELECT name, city, date_first, date_last FROM trip WHERE MONTH(date_first) = MONTH(date_last) ORDER BY 2,1;

    46) Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась 
        в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. 
        Название столбцов – Месяц и Количество.
        SELECT MONTHNAME(date_first) AS 'Месяц', COUNT(MONTHNAME(date_first)) AS 'Количество' FROM trip GROUP BY 1 ORDER BY 2 DESC, 1;

    47) Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль 
        или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый 
        день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, 
        а затем по убыванию суммы суточных.
        SELECT name, city, date_first, per_diem*(DATEDIFF(date_last+1, date_first)) AS 'Сумма' FROM trip WHERE YEAR(date_first)=2020 AND MONTH(date_first)=3 
        OR MONTH(date_first)=2 ORDER BY 1, 4 DESC;
        (!!! В SQL есть функции, которые позволяют выделить часть даты: день(DAY()), месяц (MONTH()), год(YEAR()).
         Например: DAY('2020-02-01') = 1,
                   MONTH('2020-02-01') = 2,
                   YEAR('2020-02-01') = 2020)

    48) Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 
        3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.
        SELECT name, SUM((DATEDIFF(date_last, date_first)+1)*per_diem) AS 'Сумма' FROM trip GROUP BY name HAVING COUNT(name)>3 ORDER BY name;


1.7 ТАБЛИЦА "НАРУШЕНИЯ ПДД", ЗАПРОСЫ КОРРЕКТИРОВКИ

    49) Создать таблицу fine следующей структуры:
        - fine_id (ключевой столбец целого типа с автоматическим увеличением значения ключа на 1);
        - name (строка длиной 30);
        - number_plate	(строка длиной 6);
        - violation (строка длиной 50);
        - sum_fine (вещественное число, максимальная длина 8, количество знаков после запятой 2);
        - date_violation (дата);
        - date_payment (дата)
        CREATE table fine (fine_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30), number_plate VARCHAR(6), violation VARCHAR(50), sum_fine FLOAT (8,2), 
        date_violation date, date_payment date);

    50) В таблицу fine первые 5 строк уже занесены. Добавить в таблицу записи с ключевыми значениями 6, 7, 8.
        INSERT INTO fine VALUES (6, "Баранов П.Е.", "Р523ВТ", "Превышение скорости(от 40 до 60)", NULL, "2020-02-14", NULL);
        INSERT INTO fine VALUES (7, "Абрамова К.А.", "О111АВ", "Проезд на запрещающий сигнал", NULL, "2020-02-23", NULL);
        INSERT INTO fine VALUES (8, "Яковлев Г.Р.", "Т330ТТ", "Проезд на запрещающий сигнал", NULL, "2020-03-03", NULL);

    51) Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы 
        заносить только в пустые поля столбца  sum_fine. Таблица traffic_violation уже создана и заполнена.
        UPDATE fine, traffic_violation SET fine.sum_fine = traffic_violation.sum_fine WHERE fine.sum_fine IS NULL 
        AND fine.violation = traffic_violation.violation;
        (!!! Сравнение значения столбца с пустым значением осуществляется с помощью оператора IS NULL)

    52) Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило два и более раз. 
        При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии 
        водителя, потом по номеру машины и, наконец, по нарушению.
        SELECT name, number_plate, violation FROM fine GROUP BY name, number_plate, violation HAVING COUNT(violation)>= 2 ORDER BY 1, 2, 3;

    53) В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей. 
        UPDATE fine, (SELECT name, number_plate, violation FROM fine GROUP BY name, number_plate, violation HAVING COUNT(violation)>= 2) AS query_in 
        SET sum_fine = sum_fine*2 WHERE fine.name = query_in.name AND fine.number_plate = query_in.number_plate AND fine.violation = query_in.violation 
        AND fine.date_payment IS NULL;

    54) Водители оплачивают свои штрафы. В таблице payment занесены даты их оплаты.
            Необходимо:
            - в таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment; 
            - уменьшить начисленный штраф в таблице fine в два раза  (только для тех штрафов, информация о которых занесена в таблицу payment), если 
              оплата произведена не позднее 20 дней со дня нарушения.
            
            UPDATE fine, payment SET fine.date_payment = payment.date_payment, 
                fine.sum_fine = IF((payment.date_payment - payment.date_violation)<= 20, fine.sum_fine/2, fine.sum_fine) 
                    WHERE (payment.name, payment.number_plate, payment.violation) = (fine.name, fine.number_plate, fine.violation) 
                        AND fine.date_payment IS NULL;

    55) Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму 
        штрафа  и  дату нарушения) из таблицы fine.
        Важно. На этом шаге необходимо создать таблицу на основе запроса! Не нужно одним запросом создавать таблицу, а вторым в нее добавлять строки.
        CREATE TABLE back_payment AS SELECT name, number_plate, violation, sum_fine, date_violation FROM fine WHERE date_payment IS NULL;

    56) Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года.
        DELETE FROM fine WHERE date_violation < '2020_02_01';

    57) Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде:
        SELECT title, name_genre, price FROM genre INNER JOIN book ON genre.genre_id = book.genre_id WHERE amount>8 ORDER BY price DESC

    58) Вывести все жанры, которые не представлены в книгах на складе:
        SELECT name_genre FROM genre LEFT JOIN book ON genre.genre_id = book.genre_id WHERE title IS NULL

    59) Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. 
        Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. Информацию вывести, отсортировав сначала 
        в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок.
        SELECT name_city, name_author, (DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND() * 365) DAY)) AS Дата FROM city CROSS JOIN author ORDER BY 1, 3 DESC

        P.S.: 1. Для генерации случайной даты можно к первому числу года ('2020-01-01') прибавить целое случайное число в интервале от 0 до 365.
        Генерации случайных чисел в интервале от 0 до 1 (не включительно) осуществляется с помощью функции RAND(). Если эту функцию умножить на 365, 
        то она будет генерировать вещественные числа от 0 до 365 (не включительно). Осталось только отбросить дробную часть. Это можно сделать с помощью 
        функции FLOOR(), которая возвращает наибольшее целое число, меньшее или равное указанному числовому значению. Таким образом, случайное число от 0 до 
        365 можно получить с помощью выражения:
        FLOOR(RAND() * 365)
        Важно! Даты должны быть за 2020 год, первое число года - 1 января 2020 года.   

    60) Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном по названиям книг виде.
        SELECT name_genre, title, name_author
        FROM book
        JOIN genre ON genre.genre_id = book.genre_id
        JOIN author ON author.author_id = book.author_id 
        WHERE name_genre = 'Роман'
        ORDER BY 2;

    61) Посчитать количество экземпляров  книг каждого автора из таблицы author.  Вывести тех авторов,  количество книг которых меньше 10, в отсортированном 
        по возрастанию количества виде. Последний столбец назвать Количество.
        SELECT name_author, SUM(amount) AS Количество
        FROM author 
        LEFT JOIN book
        ON author.author_id = book.author_id
        GROUP BY name_author
        HAVING Количество < 10 OR Количество IS NULL
        ORDER BY 2;

    62) Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. Поскольку у нас в таблицах так занесены данные, что у каждого автора 
        книги только в одном жанре,  для этого запроса внесем изменения в таблицу book. Пусть у нас  книга Есенина «Черный человек» относится к жанру 
        «Роман», а книга Булгакова «Белая гвардия» к «Приключениям» (эти изменения в таблицы уже внесены).
        SELECT name_author FROM author 
        JOIN book ON author.author_id = book.author_id 
        JOIN genre ON genre.genre_id = book.genre_id 
        GROUP BY name_author 
        HAVING COUNT( DISTINCT(name_genre))=1 
        ORDER by name_author;

    63) 


         
         
         
         


     
