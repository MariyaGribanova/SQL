1. ВЫВОД СОДЕРЖАНИЯ ТАБЛИЦЫ БЕЗ ДУБЛИКАТОВ:
          • Запрос: SELECT DISTINCT number FROM courses;
          • Ответ: 
          +--------+
          | number |
          +--------+
          |      1 |
          |      2 |
          |      3 |
          |      4 |
          +--------+
          
2. ВЫВОД ПЕРВЫХ ДВУХ ЗАПИСЕЙ:
          • Запрос: SELECT * FROM courses LIMIT 2;
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | bio     |      1 | NULL |
          | chem    |      2 | NULL |
          +---------+--------+------+
          
 3. ПСЕВДОНИМЫ (TEMP):
          !!! Используются, когда есть у столбцов использованые названия, пишется временный псевдоним, чтобы удобнее было смотреть.
          • Запрос: SELECT number AS номер FROM courses;
          • Ответ:
          +------------+
          | номер      |
          +------------+
          |          1 |
          |          2 |
          |          3 |
          |          4 |
          +------------+
          
4. СРАВНЕНИЕ, ЛИБО ТОЧНОЕ СОВПАДЕНИЕ ЗНАЧЕНИЙ (похоже на команду grep в GitBash);
          • Запрос: SELECT faculty, number FROM courses WHERE faculty = "bio";
          • Ответ:  
          +---------+--------+
          | faculty | number |
          +---------+--------+
          | bio     |      1 |
          +---------+--------+
          !!! также вместо знака = (перед "bio") можно использовать знаки: >, >=, <, <= (но помнить, что эти знаки актуальны только для чисел);
          !!! когда используются сочетания >=, <=, сначала всегда пишется знак >/<, а затем =.
          
5. ЛОГИЧЕСКИЕ ОПЕРАЦИИ AND ЛИБО OR:
          • Запрос: SELECT * FROM courses WHERE number = 1 AND faculty = "bio";
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | bio     |      1 | NULL |
          +---------+--------+------+
          !!! Если мы говорим об AND, то обязательно должны соблюдаться 2 условия, которые мы зададим, например: number = 1 AND faculty = "bio", в этом 
          случае выведутся значения, которые чётко соответствуют number = 1 и faculty = "bio";
          !!! Если мы говорим об OR, то в этом случае соблюдаетс только одно условие: либо number = 1, либо faculty = "bio".
          
6. ПОИСК ПОХОЖИХ ЗНАЧЕНИЙ:
          !!! Необходимо найти слова, где в конце используется буква "о". Поиск в таком запросе идёт по ключевому слову LIKE.
     6.1. • Запрос: SELECT * FROM courses WHERE faculty LIKE "%o"; (знак % перед искомой буквой ставится, если не важно количество букв перед этой буквой)
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | bio     |      1 | NULL |
          +---------+--------+------+
          
     6.2. • Запрос: SELECT * FROM courses WHERE faculty LIKE "_io"; (нижнее подчёркивание перед искомой буквой (или сочетанием букв) ставится только тогда,
                                                                     когда неизвестна одна первая буква, например: не исвестна первая буква в слове "bio")
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | bio     |      1 | NULL |
          +---------+--------+------+
          
     6.3. • Запрос: SELECT * FROM courses WHERE faculty LIKE "_a%"; (_ и % можно комбининовать, когда певая буква одна и неважно какая она, вторая буква "a"
                                                                     (либо можно написать любую искомую), знак % ставится, чтобы показать, что нам не важно
                                                                     сколько символов будет после "а");
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | math    |      3 | NULL |
          +---------+--------+------+
          
7. ПОИСК ДИАПАЗОНОВ:
          !!! Чтобы не писать длинные запросы, где перечисление идёт по порядку, например: WHERE number = 1 AND number = 2 AND number = 3 AND number = 4...
          и так может быть до бесконечности, нужно использовать диапазон и ключевое слово BETWEEN в запросе.
          • Запрос: SELECT * FROM courses WHERE number BETWEEN 2 AND 4;
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | chem    |      2 | NULL |
          | math    |      3 | NULL |
          | gum     |      4 | NULL |
          +---------+--------+------+
          
8. ТОЧНОЕ ПОПАДАНИЕ В КОНКРЕТНЫЕ ЧИСЛА ПРИ ПОИСКЕ:
          • Запрос: SELECT * FROM courses WHERE number IN (1,4);
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | bio     |      1 | NULL |
          | gum     |      4 | NULL |
          +---------+--------+------+
          
9. ОБЪЕДИНЕНИЕ ЛОГИЧЕСКИХ ФУНКЦИЙ:
          !!! Используется, когда пара значений не важна: может быть такая, либо другая такая, но при этом какое-то значение в должно быть обязательно.
          • Запрос: SELECT * FROM courses WHERE (faculty = "teo" OR faculty = "bio") AND number = 1; (в скобки объединяются значения, комбинация которых не 
                                                                                                      важна, а после AND пишется обязательное значение)
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | bio     |      1 | NULL |
          +---------+--------+------+
          
10. СОРТИРОВКА (например, по алфавиту):
    10.1. • Запрос: SELECT * FROM courses ORDER BY faculty;
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | bio     |      1 | NULL |
          | chem    |      2 | NULL |
          | gum     |      4 | NULL |
          | math    |      3 | NULL |
          +---------+--------+------+
    10.2. то же самое, но в обратном порядке:
          • Запрос: SELECT * FROM courses ORDER BY faculty DESC;
          • Ответ:
          +---------+--------+------+
          | faculty | number | id   |
          +---------+--------+------+
          | math    |      3 | NULL |
          | gum     |      4 | NULL |
          | chem    |      2 | NULL |
          | bio     |      1 | NULL |
          +---------+--------+------+
          
11. АГРЕГАТНЫЕ ФУНКЦИИ:
          • SUM - сумма;
          • MIN/MAX - минимальное/максимальное число;
          • COUNT - количество заполненных записей;
          • AVG - среднее.

          !!! Например: необходимо выделить среднее значение по полю number:
          • Запрос: SELECT AVG (number) FROM courses;
          • Ответ:
          +--------------+
          | AVG (number) |
          +--------------+
          |       2.5000 |
          +--------------+        
